#!/bin/bash
#
#==============================================================================
#
#         FILE:  lofi (bash version)
#
#        USAGE:  lofi [-p <lofi type>|--play=<lofi type>] [-s|--stop]
#                     [-l|--list] [-h|--help]
#
#  DESCRIPTION: Plays different kinds of lofis in the background. The user can
#               choose between: classic, sleepy or jazz. If no argument is
#               supplied then the classic lofi will be played.
#               These might be updated in the future so please take a look at
#               the LOFI_INDEXES list.
#
#      OPTIONS: See usage function below.
# REQUIREMENTS: bash, mpv (and a special profile)
#         BUGS: ---
#        NOTES: This script needs a profile for mpv. It's not a strict
#               requirement but it would be better to have it.
#       AUTHOR: Lancellotti Mattia
#      COMPANY: ---
#      VERSION: 1.1
#      CREATED: 10/07/2021
#     REVISION: 20/07/2021
#==============================================================================

# TODO:
#   - trap to delete /tmp/pid_lofi if Ctrl-C is pressed during the execution of
#     the play function.

declare -a PLAYER_ARGS=( "--profile=live-audio" )
declare -a LOFI_INDEXES=( "classic" "sleepy" "jazz" )
declare -A LOFI_LINKS=( 
  [classic]="https://www.youtube.com/watch?v=5qap5aO4i9A"
  [sleepy]="https://www.youtube.com/watch?v=DWcJFNfaw9c"
  [jazz]="https://www.youtube.com/watch?v=6uddGul0oAc"
)

# Place where the pid of the background-ed process is gonna end up
TMP_FILE="/tmp/pid_lofi"

log()  { echo "[@@] $1" >&1; }
warn() { echo "[!!] $1" >&2; }

# -- FUNCTION --
#
#         NAME: playLofi
#  DESCRIPTION: Plays the given lofi.
# PARAMENTER 1: The name of the lofi to play.
playLofi() {
  # Checking if the player is already in execution
  [ -f $TMP_FILE ] && \
     warn "Lofi is already playing in the background." && exit 1

  # Going on with the execution of the player
  mpv ${PLAYER_ARGS[@]} ${LOFI_LINKS[$1]} &
  [ $? == 127 ] && \
     warn "This script requires mpv to be installed." && exit 127

  # Saving the pid for later use
  log "Playing $1 (${LOFI_LINKS[$1]}) lofi."
  echo $! > $TMP_FILE
}

# -- FUNCTION --
#        NAME: stopLofi
# DESCRIPTION: Kills the running instance.
stopLofi() {
  # Checks if the player is in execution
  [ -f $TMP_FILE ] && \
    kill $(cat $TMP_FILE) && rm -f $TMP_FILE && log "Instance killed."
}

# -- FUNCTION --
#        NAME: usage
# DESCRIPTION: Prints the usage of the script file.
usage() {
  cat <<- EOT
  lofi - bash script to play lofizzz
    -p, --play : specify a lofi to play
    -s, --stop : kills the current instance
    -h, --help : prints out this message
    -l, --list : lists all possible lofis
    -m, --menu : use dialog to list all the lofis
EOT
}

menu() {
  local -a dialog_args

  for index in ${!LOFI_INDEXES[@]}; do
    dialog_args+=( "$index" ${LOFI_INDEXES[$index]} )
  done

  local track=$(dialog --output-fd 1 \
    --menu "Lofis" $[LINES/3] $[COLUMNS/4] $[COLUMNS/4] ${dialog_args[@]})
  clear
  playLofi ${LOFI_INDEXES[$track]}
}

# If no arguments are supplied then play the classic lofi
[ $# -eq 0 ] && playLofi "classic"

#------------------------------------------------------------------------------
# Parses the arguments passed to the script.
#------------------------------------------------------------------------------
set -- $@
while [ "$#" -gt 0 ]; do
  case "$1" in
    -p) playLofi "$2"; shift 2;;

    --play=*) playLofi "${1#*=}"; shift 1;;

    --stop|-s) stopLofi; shift 1;;
    --help|-h) usage; shift 1;;
    --list|-l) echo ${LOFI_INDEXES[@]}; shift 1;;
    --menu|-m) menu; shift 1;;

    --play) warn "$1 requires an argument."; exit 1;;
    *) warn "Unknown arg"; exit 1;;
  esac
done

# Exiting successfully
exit 0
