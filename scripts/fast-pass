#!/bin/bash
#
#==============================================================================
#
#         FILE: fast-pass
#
#        USAGE: fast-pass [-l|-h|-n|-d] <name>
#
#  DESCRIPTION: TODO
#
#      OPTIONS: See usage function below.
# REQUIREMENTS: gpg
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Lancellotti Mattia
#      COMPANY: ---
#      VERSION: 1.0
#      CREATED: 01/11/2021
#     REVISION: ---
#==============================================================================

# Activating extended pattern matching
shopt -s extglob

source $UTILITIES/include/system.sh
source $UTILITIES/include/logging.sh

# This script needs gpg
check_command gpg || die_on_error "You need gpg to encrypt your passwords." 1;

# Creating a local database
PROG_FILES=${HOME}/.local/share/fast-pass
LOCAL_DB="$PROG_FILES/passwords.tar"
ENCRYPTED_DB="$LOCAL_DB.gpg"

mkdir -p $PROG_FILES

usage() {
  log "fast-pass - simple bash script to store passwords."
  cat <<- EOF
  -h, --help : prints out this message.
  -l, --list : lists all the stored passwords.
  -n, --new  : stores a new password (via input).
  -d, --del  : deletes a stored password.
  --delete-all ! deletes all the passwords.

  Examples:
    fast-pass [-l|--list]       : (Will list all the saved passwords)
    fast-pass (-n|--new) <name> : (Will store the new password under <name>)
    fast-pass <name>            : (Will show the password)
EOF
}

# Listing all the passwords
list_passwds() {
  [ ! -f $ENCRYPTED_DB ] && \
    log "No passwords saved." && exit 0;

  # Decrypting and listing the content of the archive
  gpg --decrypt --no-symkey-cache --output $LOCAL_DB $ENCRYPTED_DB;
  [ $? -ne 0 ] && die_on_error "Wrong password." 1;

  tar -tvf $LOCAL_DB | awk '{print $6" (D"$4"T"$5")"}';

  # Removing the decrypted archive by shreding it
  shred --remove=wipesync --zero --exact $LOCAL_DB;
}

chck_passwd() {
  [ ! -f $ENCRYPTED_DB ] && exit 1;

  # Decrypting the database to check whether the given password is already
  # stored.
  gpg --decrypt --no-symkey-cache --quiet --output $LOCAL_DB $ENCRYPTED_DB;
  [ $? -ne 0 ] && \
    warn "Wrong password." && exit 2;

  # Searching for the password.
  local hash=$(echo $1 | sha256sum | awk '{print $1}');
  tar -tvf $LOCAL_DB | \
    gawk -v hash=$hash '{ if ($6 == hash) exit 1; }';

  return $?;
}

show_passwd() {
  [ ! -f $ENCRYPTED_DB ] && \
    log "Looks kinda empty here." && exit 0;

  # Checking if the password is stored in the database.
  chck_passwd $1;
  case $? in
    0) warn "Password not found in the database.";;
    1) tar -xOf $LOCAL_DB $(echo $1 | sha256sum | awk '{print $1}');;
    *) exit $?;;
  esac

  shred --remove=wipesync --zero --exact $LOCAL_DB;
  exit $?;
}

delete_passwd() {
  [ ! -f $ENCRYPTED_DB ] && \
    log "Look kinda empty here." && exit 0;

  chck_passwd $1;
  case $? in
    0) warn "Password not found in the database.";;
    1) update_archive 0 $(echo $1 | sha256sum | awk '{print $1}');;
    *) exit $?;;
  esac

  # Updating the encrypted archive
  shred --remove=wipesync --zero --exact $LOCAL_DB;
  exit $?;
}

update_archive() {
  [ $1 == 0 ] &&
    tar --delete -f $LOCAL_DB $2 || \
    tar -C /tmp -uf $LOCAL_DB $(basename $2);

  gpg --symmetric --output $ENCRYPTED_DB $LOCAL_DB;
}

create_archive() {
  # Creating the new archive and encrypting it.
  log "Creating the passwords database.";
  tar -C /tmp -cvf $LOCAL_DB "$(basename $1)";
  gpg --symmetric --no-symkey-cache --output $ENCRYPTED_DB $LOCAL_DB;
}

create_passwd() {
  chck_passwd $1;

  case $? in
    0)
      log "Type the password you want to store: ";
      read -s passwd;

      local pfile_db="/tmp/$(echo $1 | sha256sum | awk '{print $1}')"
      echo $passwd > $pfile_db

      [ ! -f $ENCRYPTED_DB ] && \
        create_archive   $(basename $pfile_db) || \
        update_archive 1 $(basename $pfile_db);;

    1) warn "Password already stored.";;
    *) exit $?;;
  esac

  shred --remove=wipesync --zero --exact $pfile_db $LOCAL_DB;
  exit $?;
}

# If no arguments were supplied, than list all the saved passwords.
[ $# -eq 0 ] && usage;

# Parses the arguments passed to the script.
set -- "$@"
while [ $# -gt 0 ]; do

  # All the pattern-matching below is safe so that the script won't break if the
  # user isn't smart.
  case "$1" in
    # -z checks if the given string is null (the user didn't supply the name)
    -n)
      [ ! -z $2 ] && create_passwd $2 || warn "$1: requires a parameter.";
      exit 0;;
    -g)
      [ ! -z $2 ] && show_passwd   $2 || warn "$1: requires a parameter.";
      exit 0;;
    -d)
      [ ! -z $2 ] && delete_passwd $2 || warn "$1: requires a parameter.";
      exit 0;;

    # Previously this was checking only --new=*), but * also implies a null
    # string so '--new=' could be used and it would break the script. To avoid
    # this inconvenient I'm using bash's extended pattern matching
    # (shopt extglob) !() that translates to "match everything except a null
    # string".
    --new=!()) create_passwd ${1#*=}; exit 0;;
    --get=!()) show_passwd ${1#*=}; exit 0;;
    --del=!()) delete_passwd ${1#*=}; exit 0;;

    --list|-l) list_passwds; exit 0;;
    --help|-h) usage; exit 0;;

    --delete-all) rm -rf $ENCRYPTED_DB; exit 0;;

    # Matching one of the given patterns
    @(-*=)) warn "$1: requires an argument."; exit 1;;
    @(-*)) warn "Unknown parameter $1."; exit 1;;
    *) show_passwd $1; exit 0;;
  esac
done

exit 0;
