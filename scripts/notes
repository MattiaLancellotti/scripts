#!/bin/sh
#
#==============================================================================
#
#         FILE:  notes - POSIX compliant
#
#        USAGE:  notes [-a <note>|--add=<note>] [-s <num>|--show=<num>]
#                      [-d <note>|--del=<note>] [-l|--list] [-h|--help]
#                      [--delete-all]
#
#  DESCRIPTION: Handles notes in the simpler way possible. The user can add
#               new notes, delete them or list them.
#
#      OPTIONS: See usage function below.
# REQUIREMENTS: basic busybox utilities
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Lancellotti Mattia
#      COMPANY: ---
#      VERSION: 1.0
#      CREATED: 12/07/2021
#     REVISION: 31/07/2021
#==============================================================================

# `source` breaks compatibility with sh
. $UTILITIES/include/logging.sh

# Notes' path
NOTES_FILE=~/.notelist
N_NOTES=$(wc -l $NOTES_FILE | awk '{print $1}')

# -- FUNCTION --
#        NAME: add
# DESCRIPTION: Adds the given note to the list.
# PARAMETER 1: The notes that the user wants to add.
add() {
  log "Updating the notes file."

  # Updating the file
  echo "$1" >> $NOTES_FILE
}

# -- FUNCTION --
#        NAME: list
# DESCRIPTION: Shows all the notes to the user.
list() {
  # Checking if the file still exists
  [ -s $NOTES_FILE ] && \
    log "Showing your list of notes." && cat -n $NOTES_FILE || \
    log "No notes to show." && exit 1;
}

# -- FUNCTION --
#        NAME: show
# DESCRIPTION: Shows the notes that corresponds to the given number.
# PARAMETER 1: The index of the note.
show() {
  [ ! -f $NOTES_FILE ] && \
    warn "Your notes aren't here..." && exit 1;

  # Deleting using sed
  log "Showing $1 note."
  sed -n "${1}p" $NOTES_FILE
}

edit() {
  [ ! -f $NOTES_FILE ] && \
    warn "Your notes arent' here..." && exit 1;

  [ ! $EDITOR ] && \
    warn "There is no \$EDITOR set." && exit 1;

  log "Opening the editor."
  sed -n "${1}p" $NOTES_FILE >> /tmp/note_file

  # Opening editor
  $EDITOR /tmp/note_file

  delete ${1}
  add "$(cat /tmp/note_file)"
  rm -r /tmp/note_file
}

# -- FUNCTION --
#        NAME: delete
# DESCRIPTION: Deletes the given note.
# PARAMETER 1: The index of the note.
delete() {
  [ ! -s $NOTES_FILE ] && \
    warn "Can't delete notes if there are none.." && exit 1;

  # Using sed to delete the selected line
  log "Deleting $1 note."
  sed "${1}d" -i $NOTES_FILE
}

# -- FUNCTION --
#        NAME: usage
# DESCRIPTION: Prints the usage of the script file.
usage() {
  cat <<- EOT
  notes - POSIX compliant script to save some little useful notes
    -h, --help    : prints this message
    -l, --list    : lists all your notes
    -a, --add     : adds a new note
    -s, --show    : shows the specified note
    -d, --del     : deletes the specified note
    -e, --edit    : edits a specific note
    --delete-all  : deletes all your notes
EOT
}

# If no argument is supplied then list all the notes
[ $# -eq 0 ] && list;

# Handling arguments
set -- "$@"
while [ "$#" -gt 0 ]; do
  case "$1" in
    -a) add "$2"; shift 2;;
    -s) show "$2"; shift 2;;
    -d) delete "$2"; shift 2;;
    -e) edit "$2"; shift 2;;

    --add=*) add "${1#*=}"; shift 1;;
    --show=*) show "${1#*=}"; shift 1;;
    --del=*) delete "${1#*=}"; shift 1;;
    --edit=*) edit "${1#*=}"; shift 1;;

    -l|--list) list; shift 1;;
    -h|--help) usage; shift 1;;
    --delete-all) warn "Deleting all your notes."; rm -f $NOTES_FILE; exit 0;;

    --add|--show|--del) warn "Argument '$1' requires a parameter."; exit 1;;
    *) warn "Unknown argument '$1' given."; exit 1;;
  esac
done

# Successfully exiting the script
exit 0;
