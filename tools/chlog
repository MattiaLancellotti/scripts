#!/bin/bash
#
#==============================================================================
#
#         FILE: chlog
#
#        USAGE: chlog [ <changes> | --new-version, -n <version number> ]
#
#  DESCRIPTION: This script checks if there is a CHANGELOG.md in the current
#               working directory and appends to it a new version or a new
#               change.
#
#      OPTIONS: See usage function below.
# REQUIREMENTS: bash
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Lancellotti Mattia
#      COMPANY: ---
#      VERSION: 1.0
#      CREATED: 13/09/2021
#     REVISION: 02/01/2022
#==============================================================================

# -- FUNCTION --
#        NAME: err
# DESCRIPTION: Reports errors and warnings to the user.
# PARAMETER 1: The message to report.
err() { [ $# -gt 0 ] && echo "!! $1" >&2; }

# If no arguments were supplied or the user specified '--help', then
# print the help message and exit successfully.
if [ $# -eq 0 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
  cat <<EOF
chlog - bash script to write CHANGELOGs.
  This script will check for local CHANGELOGs and update them following
  the user's directives.

  Options:
    --help, -h                  : Shows this message.
    --new-version, -n <version> : Adds a new version to the CHANGELOG.
                      <update>  : Adds the specified update.

  Examples:
    chlog --new-version 1.0
    chlog "bug #8956 fixed"
EOF
  exit 0;
fi

# This is the header of all the changelogs generated by this script
HEADER="CHANGELOG\n---------\n"

# The argument --new-version|-n is going to tell chlog to create a new CHANGELOG
# or a new version in the existing one. It requires a parameter and that's the
# actual version.
if [ "$1" == "--new-version" ] || [ "$1" == "-n" ]; then
  if [ -z "$2" ]; then
    err "The option $1 needs a parameter.";
    exit 1;
  fi

  # By default this script will check if there is a changelog in the current
  # directory (CHANGELOG.md). If it doesn't exist then the first version must be
  # specified.
  [ ! -f "CHANGELOG.md" ] && echo -e $HEADER >> CHANGELOG.md;
  echo -e "* Version '$2':" >> CHANGELOG.md;
else
  # If no CHANGELOG is present, warn the user about it and exit with an error.
  if [ ! -f "CHANGELOG.md" ]; then
    err "You must use --new-version before adding changes";
    exit 1;
  fi

  # Updating the changelog to the local file.
  echo -e "\t- $(date +%d/%m/%Y) $@" >> CHANGELOG.md;
fi
