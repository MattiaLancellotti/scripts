#!/bin/bash

# -- FUNCTION --
#        NAME: log, err
# DESCRIPTION: Reports errors, warnings and messages to the user.
# PARAMETER 1: The message to report.
log() { [ $# -gt 0 ] && echo ":: $1" >&1; }
err() { [ $# -gt 0 ] && echo "!! $1" >&2; }

# -- FUNCTION --
#        NAME: check_command
# DESCRIPTION: Checks whether a program is available through a built-in.
# PARAMETER 1: Program needed.
check_command() { command -v "$1" 1> /dev/null; }

check_command curl || {
  err "You need curl to run this script";
  exit 1;
}

check_command jq   || {
  err "You need jq to run this script";
  exit 1;
}

# Some useful variables
USERNAME="mattialancellotti"
APISLINK="https://api.github.com/users/${USERNAME}/repos"
HUBSLINK="https://github.com/${mattialancellotti}"

# This is a bit weird but really cool.
# Basically it retrieves all your github repositories through a curl request to
# GitHub's APIs. Once the curl got the JSON, it's passed to jq to parse it and
# to get just the names. Finally deletes the useless " that comes with the JSON.
declare -a REPO_LIST=($(curl -s https://api.github.com/users/mattialancellotti/repos \
  | jq '.[] | .name ' \
  | tr --delete \"))

# Displaying all the repos and checking whether each of them is locally synched
# or not.
log "Displaying all your repositories from $USERNAME"
for repository in ${REPO_LIST[@]}; do
  # Defining path of the local repository
  LOCAL_REPO="$HOME/code/$repository"
  SHORT_NAME=${repository%%-*}

  # Checking if the remote repository is present on the system
  if [ -d $LOCAL_REPO ]; then
    # Getting the last commit's relative date and printing it out
    LAST_COMMIT=$(git -C $LOCAL_REPO log -1 --date=relative --format="%ah")
    echo -e "[✓] $SHORT_NAME synched.\t($LAST_COMMIT)"
  else
    echo -e "[✗] $SHORT_NAME not synched."
  fi
done | sort -r
