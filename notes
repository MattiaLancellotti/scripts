#!/bin/bash
#
#==============================================================================
#
#         FILE:  notes - Bash script
#
#        USAGE:  notes [-a <note>|--add=<note>] [-s <num>|--show=<num>]
#                      [-d <note>|--del=<note>] [-l|--list] [-h|--help]
#                      [--delete-all]
#
#  DESCRIPTION: Handles notes in the simpler way possible. The user can add
#               new notes, delete them or list them.
#
#      OPTIONS: See usage function below.
# REQUIREMENTS: basic busybox utilities
#         BUGS: ---
#        NOTES: This is a branch for testing a new form of notes. Basically
#               instead of having all the notes in a single file, multiple files
#               are going to be created and each of them rapresents a section.
#       AUTHOR: Lancellotti Mattia
#      COMPANY: ---
#      VERSION: 1.0
#      CREATED: 12/07/2021
#     REVISION: 31/07/2021
#==============================================================================

shopt -s extglob

# -- FUNCTION --
#        NAME: log, err
# DESCRIPTION: Report messages.
# PARAMETER 1: Message to report.
log() { [ ${#*} -gt 0 ] && echo ":: $1" >&1; }
err() { [ ${#*} -gt 0 ] && echo "!! $1" >&2; }

# -- FUNCTION --
#        NAME: check_command
# DESCRIPTION: Checks whether a program is available through a built-in.
# PARAMETER 1: Program needed.
check_command() { command -v "$1" 1> /dev/null; }

# Notes' path
NOTES_PATH=~/.local/share/notes
mkdir -p $NOTES_PATH

# Specified section
SECTION=mix

# -- FUNCTION --
#        NAME: add
# DESCRIPTION: Adds the given note to the list.
# PARAMETER 1: The notes that the user wants to add.
add() {
  log "Updating note file: $SECTION."

  # Updating the file
  echo "$1" >> $NOTES_PATH/$SECTION
}

# -- FUNCTION --
#        NAME: list
# DESCRIPTION: Shows all the notes to the user.
# PARAMETER @: Files to be shown.
list() {
  local sections="$(ls $NOTES_PATH)";

  # Checking if the file still exists
  [ -z "$sections" ] && \
    log "Seems kinda empty in here...." && \
    log "Try with notes --add=<text>"   && exit 1;

  # If some arguments were supplied to the function they are going to be
  # interpreted as section names.
  # To avoid ifs and stuff, I'm using positional parameters.
  [ $# -gt 0 ] && set -- "$@" || set -- "$sections";

  # Show every single file listed as positional parameters.
  for sec in $@; do
    [ -f $NOTES_PATH/$sec ] && \
      log  "Notes from $sec:" && cat -n $NOTES_PATH/$sec || \
      err "No notes in $sec.";
  done
}

edit() {
  local sections="$(ls $NOTES_PATH)";

  # Checking if the file still exists
  [ -z "$sections" ] && \
    log "Seems kinda empty in here...." && \
    log "Try with notes --add=<text>"   && exit 0;

  [ ! $EDITOR ] && \
    err "There is no \$EDITOR set." && exit 1;

  [ ! -f $NOTES_PATH/$SECTION ] && \
    log "Have to specify a section." && exit 1;

  log "Editing note $1 from $SECTION.";
  sed -n "${1}p" $NOTES_PATH/$SECTION >> /tmp/note_file;

  # Opening editor
  $EDITOR /tmp/note_file;

  delete ${1};
  add "$(cat /tmp/note_file)";
  rm -r /tmp/note_file;
}

# -- FUNCTION --
#        NAME: delete
# DESCRIPTION: Deletes the given note.
# PARAMETER 1: The index of the note.
delete() {
  local sections="$(ls $NOTES_PATH)";

  # Checking if the file still exists
  [ -z "$sections" ] && \
    log "Seems kinda empty in here...." && \
    log "Try with notes --add=<text>"   && exit 1;

  [ ! -f $NOTES_PATH/$SECTION ] && \
    log "Have to specify a section." && exit 1;

  # Using sed to delete the selected line
  log "Deleting note $1 from $SECTION.";
  sed "${1}d" -i $NOTES_PATH/$SECTION;

  # Checking if the section is empty
  [ -z "$(cat $NOTES_PATH/$SECTION)" ] && \
    rm -v $NOTES_PATH/$SECTION;

  return 0;
}

# -- FUNCTION --
#        NAME: usage
# DESCRIPTION: Prints the usage of the script file.
usage() {
  cat <<- EOT
  notes - Bash script to save some little useful notes
    -h, --help    : prints this message
    -l, --list    : lists all your notes
    -a, --add     : adds a new note
    -s, --section : shows the specified note
    -d, --del     : deletes the specified note
    -e, --edit    : edits a specific note
    --delete-all  : deletes all your notes
EOT
}

# If no argument is supplied then list all the notes
[ $# -eq 0 ] && list;

# Handling arguments
set -- "$@"
while [ "$#" -gt 0 ]; do
  case "$1" in
    -a)
      [ ! -z "$2" ] && add "$2" || err "$1: requires a parameter.";
      exit 0;;
    -s)
      [ ! -z "$2" ] && SECTION=$2 || err "$1: requires a parameter.";
      shift 2;;
    -d)
      [ ! -z "$2" ] && delete "$2" || err "$1: requires a parameter.";
      exit 0;;
    -e)
      [ ! -z "$2" ] && edit "$2" || err "$1: requires a parameter.";
      exit 0;;

    --add=!()) add "${1#*=}"; exit 0;;
    --section=!()) SECTION="${1#*=}"; shift 1;;
    --del=!()) delete "${1#*=}"; exit 0;;
    --edit=!()) edit "${1#*=}"; exit 0;;

    -l|--list) list; exit 0;;
    -h|--help) usage; exit 0;;
    --delete-all) err "Deleting all your notes."; rm -f $NOTES_FILE; exit 0;;

    @(-*=)) err "$1: requires an argument."; exit 1;;
    @(-*)) err "Unknown argument '$1' given."; exit 1;;

    *) list $@; exit 0;;
  esac
done

# Successfully exiting the script
exit 0;
